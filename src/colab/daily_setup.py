# File: src/colab/daily_setup.py
from google.colab import drive
import os
import sys
from datetime import datetime

def setup_ngay_moi():
    """Setup m√¥i tr∆∞·ªùng cho ng√†y l√†m vi·ªác m·ªõi"""
    
    print(f"üåÖ SETUP NG√ÄY M·ªöI - {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("=" * 60)
    
    # 1. Mount Google Drive
    mount_drive()
    
    # 2. Chuy·ªÉn v√†o th∆∞ m·ª•c d·ª± √°n
    setup_project_directory()
    
    # 3. T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
    create_directory_structure()
    
    # 4. T·∫°o c√°c file c·∫ßn thi·∫øt
    create_essential_files()
    
    # 5. Setup Python path
    setup_python_path()
    
    # 6. Test import modules
    test_modules()
    
    # 7. Test API connection
    test_api_connection()
    
    print("\nüéØ SETUP HO√ÄN T·∫§T!")
    print("‚úÖ S·∫µn s√†ng b·∫Øt ƒë·∫ßu ng√†y m·ªõi!")
    print("üìã S·ª≠ d·ª•ng: exec(open('src/colab/test_and_validate.py').read()) ƒë·ªÉ ki·ªÉm tra")
    
    return True

def mount_drive():
    """Mount Google Drive"""
    print("üìÅ Mount Google Drive...")
    
    try:
        drive.mount('/content/drive')
        print("‚úÖ Google Drive mounted th√†nh c√¥ng")
    except Exception as e:
        print("‚ö†Ô∏è Drive ƒë√£ ƒë∆∞·ª£c mount ho·∫∑c c√≥ l·ªói:", str(e))

def setup_project_directory():
    """Setup th∆∞ m·ª•c d·ª± √°n"""
    print("üìÇ Setup th∆∞ m·ª•c d·ª± √°n...")
    
    project_path = '/content/drive/MyDrive/vietforex-bot'
    
    try:
        if not os.path.exists(project_path):
            os.makedirs(project_path)
            print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {project_path}")
        
        os.chdir(project_path)
        print(f"‚úÖ ƒê√£ chuy·ªÉn v√†o: {os.getcwd()}")
        
    except Exception as e:
        print(f"‚ùå L·ªói setup th∆∞ m·ª•c: {e}")
        return False
    
    return True

def create_directory_structure():
    """T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    print("üèóÔ∏è T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c...")
    
    required_dirs = [
        'src',
        'src/colab', 
        'data',
        'models',
        'logs',
        'backups'
    ]
    
    for dir_name in required_dirs:
        try:
            if not os.path.exists(dir_name):
                os.makedirs(dir_name, exist_ok=True)
                print(f"üìÅ T·∫°o: {dir_name}")
            else:
                print(f"‚úÖ C√≥: {dir_name}")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói t·∫°o {dir_name}: {e}")

def create_essential_files():
    """T·∫°o c√°c file c·∫ßn thi·∫øt n·∫øu ch∆∞a c√≥"""
    print("üìù T·∫°o file c·∫ßn thi·∫øt...")
    
    # 1. VietForex API Client
    create_vietforex_api()
    
    # 2. Data Processor
    create_data_processor()
    
    # 3. Test & Validate
    create_test_validate()
    
    # 4. End of day sync (ƒë∆°n gi·∫£n)
    create_end_of_day_sync()

def create_vietforex_api():
    """T·∫°o VietForex API client"""
    file_path = 'src/colab/vietforex_api.py'
    
    if os.path.exists(file_path):
        print(f"‚úÖ {file_path} ƒë√£ c√≥")
        return
    
    api_content = '''# VietForex API Client for Google Colab
import requests
import json
import pandas as pd
import numpy as np
from typing import Dict, Any, Optional, List
import time
from datetime import datetime

class VietForexAPI:
    """VietForex API Client for Google Colab Integration"""

    def __init__(self, base_url: str, api_key: str = "VietForex_API_Key_2024"):
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.session = requests.Session()
        self.session.headers.update({
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
            "User-Agent": "VietForex-Colab-Client/1.0"
        })
        print(f"üöÄ VietForex API Client ƒë√£ kh·ªüi t·∫°o")
        print(f"üîó Server: {self.base_url}")

    def health_check(self) -> Dict[str, Any]:
        """Ki·ªÉm tra k·∫øt n·ªëi API"""
        try:
            response = self.session.get(f"{self.base_url}/api/health")
            response.raise_for_status()
            health_data = response.json()
            print(f"‚úÖ API Health: {health_data['status']}")
            return health_data
        except Exception as e:
            print(f"‚ùå API Health Check Failed: {str(e)}")
            return {"error": str(e), "status": "failed"}

    def generate_signal(self, pair: str) -> Dict[str, Any]:
        """T·∫°o t√≠n hi·ªáu giao d·ªãch"""
        try:
            payload = {"pair": pair.upper(), "signal_type": "auto", "include_analysis": True}
            response = self.session.post(f"{self.base_url}/api/signals/generate", json=payload)
            response.raise_for_status()
            signal_data = response.json()
            
            if signal_data.get('success'):
                print(f"üéØ T√≠n hi·ªáu: {signal_data['signal']} {signal_data['pair']}")
                print(f"üí∞ Entry: {signal_data['entry_price']}")
                print(f"üõë Stop Loss: {signal_data['stop_loss']}")
                print(f"üéØ Take Profit: {signal_data['take_profit']}")
                
            return signal_data
        except Exception as e:
            print(f"‚ùå T·∫°o t√≠n hi·ªáu th·∫•t b·∫°i: {str(e)}")
            return {"error": str(e), "success": False}

    def get_signals_history(self, pair: str = None, limit: int = 10) -> Dict[str, Any]:
        """L·∫•y l·ªãch s·ª≠ t√≠n hi·ªáu"""
        try:
            params = {"limit": limit}
            if pair:
                params["pair"] = pair.upper()
            
            response = self.session.get(f"{self.base_url}/api/signals/history", params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y l·ªãch s·ª≠: {str(e)}")
            return {"error": str(e)}

    def get_performance_analytics(self, period: str = "30d") -> Dict[str, Any]:
        """L·∫•y ph√¢n t√≠ch hi·ªáu su·∫•t"""
        try:
            params = {"period": period}
            response = self.session.get(f"{self.base_url}/api/analytics/performance", params=params)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå L·ªói l·∫•y analytics: {str(e)}")
            return {"error": str(e)}
'''
    
    try:
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(api_content)
        print(f"‚úÖ T·∫°o: {file_path}")
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o API file: {e}")

def create_data_processor():
    """T·∫°o Data Processor"""
    file_path = 'src/colab/data_processor.py'
    
    if os.path.exists(file_path):
        print(f"‚úÖ {file_path} ƒë√£ c√≥")
        return
    
    processor_content = '''# Data Processor for VietForex
import pandas as pd
import numpy as np
from typing import Dict, List, Any
from datetime import datetime

class DataProcessor:
    """X·ª≠ l√Ω d·ªØ li·ªáu cho VietForex trading bot"""
    
    def __init__(self):
        print("üîß DataProcessor ƒë√£ kh·ªüi t·∫°o")
    
    def clean_market_data(self, data: pd.DataFrame) -> pd.DataFrame:
        """L√†m s·∫°ch d·ªØ li·ªáu th·ªã tr∆∞·ªùng"""
        try:
            # Lo·∫°i b·ªè d·ªØ li·ªáu tr√πng l·∫∑p
            data = data.drop_duplicates()
            
            # Lo·∫°i b·ªè gi√° tr·ªã null
            data = data.dropna()
            
            print(f"‚úÖ ƒê√£ l√†m s·∫°ch d·ªØ li·ªáu: {len(data)} records")
            return data
        except Exception as e:
            print(f"‚ùå L·ªói l√†m s·∫°ch d·ªØ li·ªáu: {e}")
            return data
    
    def calculate_indicators(self, data: pd.DataFrame) -> pd.DataFrame:
        """T√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t"""
        try:
            # Moving Average
            data['MA_20'] = data['close'].rolling(window=20).mean()
            data['MA_50'] = data['close'].rolling(window=50).mean()
            
            # RSI
            delta = data['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            data['RSI'] = 100 - (100 / (1 + rs))
            
            print("‚úÖ ƒê√£ t√≠nh to√°n c√°c ch·ªâ b√°o k·ªπ thu·∫≠t")
            return data
        except Exception as e:
            print(f"‚ùå L·ªói t√≠nh to√°n ch·ªâ b√°o: {e}")
            return data
    
    def prepare_training_data(self, data: pd.DataFrame, target_col: str = 'close') -> tuple:
        """Chu·∫©n b·ªã d·ªØ li·ªáu cho training"""
        try:
            # T·∫°o features v√† target
            features = data.select_dtypes(include=[np.number]).fillna(0)
            target = data[target_col].shift(-1).fillna(0)  # Predict next value
            
            print(f"‚úÖ D·ªØ li·ªáu training: {features.shape[0]} samples, {features.shape[1]} features")
            return features, target
        except Exception as e:
            print(f"‚ùå L·ªói chu·∫©n b·ªã training data: {e}")
            return None, None
'''
    
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(processor_content)
        print(f"‚úÖ T·∫°o: {file_path}")
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o DataProcessor: {e}")

def create_test_validate():
    """T·∫°o file test v√† validate"""
    file_path = 'src/colab/test_and_validate.py'
    
    if os.path.exists(file_path):
        print(f"‚úÖ {file_path} ƒë√£ c√≥")
        return
    
    test_content = '''# Test and Validate VietForex System
import os
import sys
from datetime import datetime

def test_he_thong():
    """Test to√†n b·ªô h·ªá th·ªëng"""
    print("‚ö° KI·ªÇM TRA H·ªÜ TH·ªêNG VIETFOREX")
    print("=" * 40)
    
    # Test API connection
    ket_qua = test_api_connection()
    
    if ket_qua:
        print("\\n‚úÖ H·ªÜ TH·ªêNG HO·∫†T ƒê·ªòNG T·ªêT!")
        print("üöÄ C√≥ th·ªÉ b·∫Øt ƒë·∫ßu trading!")
        
        # Hi·ªÉn th·ªã th√¥ng tin h·ªØu √≠ch
        print("\\nüìã L·ªÜNH H·ªÆU √çCH:")
        print("1. T·∫°o t√≠n hi·ªáu: api.generate_signal('EURUSD')")
        print("2. Xem l·ªãch s·ª≠: api.get_signals_history()")
        print("3. Ph√¢n t√≠ch: api.get_performance_analytics()")
        
    else:
        print("\\n‚ùå H·ªÜ TH·ªêNG C√ì V·∫§N ƒê·ªÄ!")
        print("üîß C·∫ßn ki·ªÉm tra l·∫°i API server")
    
    return ket_qua

def test_api_connection():
    """Test k·∫øt n·ªëi API"""
    print("üåê Test API connection...")
    
    try:
        from src.colab.vietforex_api import VietForexAPI
        
        api = VietForexAPI("http://145.79.13.123:3000")
        
        # Health check
        health = api.health_check()
        
        if health.get('status') == 'healthy':
            print("‚úÖ API Server online")
            
            # Test signal generation
            print("\\nüìä Test t·∫°o t√≠n hi·ªáu...")
            signal = api.generate_signal("EURUSD")
            
            if signal.get('success'):
                print("‚úÖ T·∫°o t√≠n hi·ªáu th√†nh c√¥ng")
                return True
            else:
                print("‚ö†Ô∏è T·∫°o t√≠n hi·ªáu c√≥ v·∫•n ƒë·ªÅ")
                return False
        else:
            print("‚ùå API Server offline")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói API test: {e}")
        return False

# Ch·∫°y test khi file ƒë∆∞·ª£c load
if __name__ == "__main__":
    test_he_thong()
else:
    test_he_thong()
'''
    
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(test_content)
        print(f"‚úÖ T·∫°o: {file_path}")
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o test file: {e}")

def create_end_of_day_sync():
    """T·∫°o file end of day sync ƒë∆°n gi·∫£n"""
    file_path = 'src/colab/end_of_day_sync.py'
    
    if os.path.exists(file_path):
        print(f"‚úÖ {file_path} ƒë√£ c√≥")
        return
    
    sync_content = '''# End of Day Sync - Simple Version
import os
import json
from datetime import datetime

def ket_thuc_ngay():
    """K·∫øt th√∫c ng√†y - t·∫°o b√°o c√°o v√† backup"""
    print(f"üåô K·∫æT TH√öC NG√ÄY {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("=" * 50)
    
    # 1. T·∫°o b√°o c√°o ng√†y
    tao_bao_cao()
    
    # 2. T·∫°o file tr·∫°ng th√°i cho chat m·ªõi
    tao_project_status()
    
    print("‚úÖ HO√ÄN TH√ÄNH!")
    print("üìã File project_status.md s·∫µn s√†ng cho chat m·ªõi")
    
    return True

def tao_bao_cao():
    """T·∫°o b√°o c√°o ng√†y"""
    print("üìä T·∫°o b√°o c√°o...")
    
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    report = {
        "date": datetime.now().strftime('%Y-%m-%d'),
        "time": datetime.now().strftime('%H:%M:%S'),
        "activities": ["API testing", "Signal generation", "System monitoring"],
        "status": "completed"
    }
    
    report_file = f"logs/daily_report_{report['date']}.json"
    
    try:
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ B√°o c√°o: {report_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói b√°o c√°o: {e}")

def tao_project_status():
    """T·∫°o file tr·∫°ng th√°i d·ª± √°n"""
    print("üìã T·∫°o project status...")
    
    current_time = datetime.now()
    current_dir = os.getcwd()
    
    # Test API nhanh
    api_status = "‚ùå Ch∆∞a test"
    try:
        from src.colab.vietforex_api import VietForexAPI
        api = VietForexAPI("http://145.79.13.123:3000")
        health = api.health_check()
        if health.get('status') == 'healthy':
            api_status = "‚úÖ Online"
    except:
        api_status = "‚ö†Ô∏è C·∫ßn ki·ªÉm tra"
    
    status_content = f"""# VietForex Bot - Tr·∫°ng th√°i D·ª± √°n

## üìÖ C·∫≠p nh·∫≠t: {current_time.strftime('%d/%m/%Y %H:%M')}

## üè† Th√¥ng tin c∆° b·∫£n:
- **Th∆∞ m·ª•c**: `{current_dir}`
- **API Server**: `http://145.79.13.123:3000`
- **Tr·∫°ng th√°i API**: {api_status}

## üîÑ L·ªánh h√†ng ng√†y:
```python
# S√°ng - Setup
exec(open('src/colab/daily_setup.py').read())

# Ki·ªÉm tra
exec(open('src/colab/test_and_validate.py').read())

# T·ªëi - Backup
exec(open('src/colab/end_of_day_sync.py').read())
```

## üéØ T√≠nh nƒÉng ho·∫°t ƒë·ªông:
- ‚úÖ API connection
- ‚úÖ Signal generation  
- ‚úÖ Health monitoring
- ‚úÖ Daily reports

## üí° Cho chat m·ªõi:
```
VietForex Bot project:
üìÅ {current_dir}
üåê API: http://145.79.13.123:3000
üìä Status: {api_status}
```

---
*T·∫°o t·ª± ƒë·ªông: {current_time.strftime('%d/%m/%Y %H:%M')}*
"""
    
    try:
        with open('project_status.md', 'w', encoding='utf-8') as f:
            f.write(status_content)
        print("‚úÖ project_status.md")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói t·∫°o status: {e}")

# Ch·∫°y khi ƒë∆∞·ª£c exec
if __name__ == "__main__":
    ket_thuc_ngay()
else:
    ket_thuc_ngay()
'''
    
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(sync_content)
        print(f"‚úÖ T·∫°o: {file_path}")
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o sync file: {e}")

def setup_python_path():
    """Setup Python path ƒë·ªÉ import ƒë∆∞·ª£c modules"""
    print("üêç Setup Python path...")
    
    current_dir = os.getcwd()
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
        print(f"‚úÖ ƒê√£ th√™m v√†o sys.path: {current_dir}")
    else:
        print("‚úÖ Python path ƒë√£ ƒë∆∞·ª£c setup")

def test_modules():
    """Test import c√°c modules"""
    print("üß™ Test import modules...")
    
    try:
        from src.colab.vietforex_api import VietForexAPI
        print("‚úÖ VietForexAPI - OK")
    except Exception as e:
        print(f"‚ö†Ô∏è VietForexAPI - L·ªói: {e}")
    
    try:
        from src.colab.data_processor import DataProcessor
        print("‚úÖ DataProcessor - OK")
    except Exception as e:
        print(f"‚ö†Ô∏è DataProcessor - L·ªói: {e}")

def test_api_connection():
    """Test k·∫øt n·ªëi API"""
    print("üåê Test API connection...")
    
    try:
        from src.colab.vietforex_api import VietForexAPI
        api = VietForexAPI("http://145.79.13.123:3000")
        
        health = api.health_check()
        if health.get('status') == 'healthy':
            print("‚úÖ API Server online v√† ho·∫°t ƒë·ªông t·ªët")
            return True
        else:
            print("‚ö†Ô∏è API Server c√≥ v·∫•n ƒë·ªÅ")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói test API: {e}")
        return False

# Ch·∫°y setup khi file ƒë∆∞·ª£c th·ª±c thi
if __name__ == "__main__":
    setup_ngay_moi()
else:
    # Ch·∫°y khi ƒë∆∞·ª£c exec()
    setup_ngay_moi()