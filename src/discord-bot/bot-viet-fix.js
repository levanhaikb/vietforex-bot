const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Bi·∫øn l∆∞u tr·ªØ channel signals
let SIGNALS_CHANNEL = null;

client.on('ready', () => {
    console.log(`‚úÖ ${client.user.tag} ƒë√£ online!`);
    
    // T·ª± ƒë·ªông t√¨m channel signals
    client.guilds.cache.forEach(guild => {
        console.log(`üîç T√¨m ki·∫øm channels trong guild: ${guild.name}`);
        
        const signalsChannel = guild.channels.cache.find(channel => 
            channel.name.includes('signals') || 
            channel.name.includes('vietforex') ||
            channel.id === '1378299763429441566'
        );
        
        if (signalsChannel) {
            SIGNALS_CHANNEL = signalsChannel;
            console.log(`‚úÖ T√¨m th·∫•y signals channel: ${signalsChannel.name} (${signalsChannel.id})`);
        }
    });
    
    client.user.setActivity('üéØ VietForex Signals', { type: 'WATCHING' });
    console.log('üåâ Signal Bridge s·∫µn s√†ng nh·∫≠n signals');
});

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    
    const content = message.content.toLowerCase();
    console.log(`üì® Nh·∫≠n tin nh·∫Øn: ${content} t·ª´ ${message.author.username}`);
    
    if (content === '!ping') {
        const embed = new EmbedBuilder()
            .setTitle('üèì Pong!')
            .setDescription('VietForex Bot ƒëang ho·∫°t ƒë·ªông')
            .setColor(0x00FF00)
            .addFields(
                { name: '‚è∞ Th·ªùi gian', value: new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' }), inline: true },
                { name: 'üìä Status', value: 'üü¢ ONLINE', inline: true },
                { name: 'üéØ Channel', value: SIGNALS_CHANNEL ? `‚úÖ ${SIGNALS_CHANNEL.name}` : '‚ùå Ch∆∞a t√¨m th·∫•y', inline: true }
            )
            .setFooter({ text: 'Made in Vietnam üáªüá≥' })
            .setTimestamp();
        
        await message.reply({ embeds: [embed] });
        console.log(`‚úÖ ƒê√£ tr·∫£ l·ªùi !ping cho ${message.author.username}`);
    }
    
    if (content === '!trogiup') {
        const embed = new EmbedBuilder()
            .setTitle('ü§ñ H∆∞·ªõng D·∫´n VietForex Bot')
            .setDescription('Bot Trading Forex t·ª± ƒë·ªông b·∫±ng ti·∫øng Vi·ªát')
            .setColor(0x800080)
            .addFields(
                { name: '!ping', value: 'üèì Ki·ªÉm tra bot ho·∫°t ƒë·ªông', inline: true },
                { name: '!trogiup', value: '‚ùì Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n', inline: true },
                { name: '!test', value: 'üß™ Test t√≠n hi·ªáu m·∫´u', inline: true },
                { name: '!channel', value: 'üì∫ Hi·ªÉn th·ªã channel info', inline: true }
            )
            .addFields({
                name: 'üéØ T√≠nh nƒÉng',
                value: `‚Ä¢ T√≠n hi·ªáu trading t·ª± ƒë·ªông m·ªói 3 ph√∫t
                       ‚Ä¢ Ph√¢n t√≠ch AI b·∫±ng ti·∫øng Vi·ªát  
                       ‚Ä¢ Qu·∫£n l√Ω r·ªßi ro chuy√™n nghi·ªáp
                       ‚Ä¢ Theo d√µi hi·ªáu su·∫•t real-time`,
                inline: false
            })
            .setFooter({ text: 'VietForex Trading Bot üáªüá≥' })
            .setTimestamp();
        
        await message.reply({ embeds: [embed] });
        console.log(`‚úÖ ƒê√£ hi·ªÉn th·ªã tr·ª£ gi√∫p cho ${message.author.username}`);
    }
    
    if (content === '!test') {
        await guiTinHieuTest(message.channel);
    }
    
    if (content === '!channel') {
        let channelInfo = 'Danh s√°ch channels:\n';
        message.guild.channels.cache.forEach(channel => {
            if (channel.type === 0) { // Text channel
                channelInfo += `‚Ä¢ ${channel.name} (${channel.id})\n`;
            }
        });
        
        await message.reply(`\`\`\`${channelInfo}\`\`\``);
    }
});

// Function g·ª≠i t√≠n hi·ªáu test
async function guiTinHieuTest(channel) {
    const tinHieuTest = {
        ma_tin_hieu: 'TEST_' + Date.now(),
        cap_tien_te: 'EURUSD',
        huong: Math.random() > 0.5 ? 'MUA' : 'BAN',
        gia_vao: 1.0850,
        cat_lo: 1.0830,
        lay_lai: 1.0890,
        do_tin_cay: 85
    };
    
    console.log(`üì® Nh·∫≠n signal: ${tinHieuTest.huong} ${tinHieuTest.cap_tien_te}`);
    await guiTinHieu(tinHieuTest, channel);
    console.log(`üß™ ƒê√£ g·ª≠i test signal cho ${channel.guild ? 'channel' : 'DM'}`);
}

// Function g·ª≠i t√≠n hi·ªáu ch√≠nh
async function guiTinHieu(duLieuTinHieu, targetChannel = null) {
    try {
        // ∆Øu ti√™n s·ª≠ d·ª•ng targetChannel, sau ƒë√≥ l√† SIGNALS_CHANNEL
        const channel = targetChannel || SIGNALS_CHANNEL;
        
        if (!channel) {
            console.error('‚ùå Kh√¥ng t√¨m th·∫•y channel ƒë·ªÉ g·ª≠i signal');
            return false;
        }
        
        const bieuTuongHuong = duLieuTinHieu.huong === 'MUA' ? 'üü¢' : 'üî¥';
        const mauSac = duLieuTinHieu.huong === 'MUA' ? 0x00FF00 : 0xFF0000;
        const saoTinCay = '‚≠ê'.repeat(Math.min(5, Math.floor(duLieuTinHieu.do_tin_cay / 20)));
        
        const embed = new EmbedBuilder()
            .setTitle(`${bieuTuongHuong} T√çN HI·ªÜU ${duLieuTinHieu.huong} ${duLieuTinHieu.cap_tien_te}`)
            .setColor(mauSac)
            .addFields(
                { name: 'üí∞ Gi√° v√†o', value: `${duLieuTinHieu.gia_vao}`, inline: true },
                { name: 'üõë C·∫Øt l·ªó', value: `${duLieuTinHieu.cat_lo}`, inline: true },
                { name: 'üéØ L·∫•y l√£i', value: `${duLieuTinHieu.lay_lai}`, inline: true },
                { name: 'üìä ƒê·ªô tin c·∫≠y', value: `${duLieuTinHieu.do_tin_cay}% ${saoTinCay}`, inline: true },
                { name: 'üÜî M√£ TH', value: duLieuTinHieu.ma_tin_hieu.slice(-8), inline: true },
                { name: '‚è∞ Th·ªùi gian', value: new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' }), inline: true }
            )
            .addFields({
                name: 'üìà Ph√¢n t√≠ch',
                value: `üî∏ **Xu h∆∞·ªõng**: ${duLieuTinHieu.huong === 'MUA' ? 'TƒÉng m·∫°nh üìà' : 'Gi·∫£m m·∫°nh üìâ'}
                       üî∏ **Khung TG**: M15/H1 
                       üî∏ **AI Model**: VietForex v2.0
                       üî∏ **Risk/Reward**: 1:2.0`,
                inline: false
            })
            .setFooter({ text: '‚ö° VietForex AI Trading System - Made in Vietnam üáªüá≥' })
            .setTimestamp();
        
        await channel.send({ embeds: [embed] });
        console.log(`‚úÖ ƒê√£ g·ª≠i signal: ${duLieuTinHieu.huong} ${duLieuTinHieu.cap_tien_te} (${duLieuTinHieu.do_tin_cay}%) ƒë·∫øn ${channel.name}`);
        return true;
        
    } catch (error) {
        console.error('‚ùå L·ªói khi g·ª≠i signal:', error);
        return false;
    }
}

// Export function ƒë·ªÉ Signal Generator c√≥ th·ªÉ s·ª≠ d·ª•ng
global.guiTinHieuVietForex = guiTinHieu;

// Login bot
client.login(process.env.DISCORD_BOT_TOKEN)
    .then(() => {
        console.log('üöÄ VietForex Discord Bot ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!');
    })
    .catch(error => {
        console.error('‚ùå L·ªói k·∫øt n·ªëi Discord:', error);
    });

module.exports = { client, guiTinHieu };
