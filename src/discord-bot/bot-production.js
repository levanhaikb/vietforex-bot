const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Channel ID ƒë√£ t√¨m th·∫•y t·ª´ debug
const SIGNALS_CHANNEL_ID = '1378660503529852939';
let SIGNALS_CHANNEL = null;

client.on('ready', () => {
    console.log(`‚úÖ ${client.user.tag} ƒë√£ online!`);
    
    // T√¨m channel signals
    SIGNALS_CHANNEL = client.channels.cache.get(SIGNALS_CHANNEL_ID);
    
    if (SIGNALS_CHANNEL) {
        console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi channel: ${SIGNALS_CHANNEL.name} (${SIGNALS_CHANNEL.id})`);
        console.log('üåâ Signal Bridge s·∫µn s√†ng nh·∫≠n signals t·ª´ Generator');
    } else {
        console.error(`‚ùå Kh√¥ng t√¨m th·∫•y channel: ${SIGNALS_CHANNEL_ID}`);
    }
    
    client.user.setActivity('üéØ VietForex Signals Live', { type: 'WATCHING' });
});

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    
    const content = message.content.toLowerCase();
    
    if (content === '!ping') {
        const embed = new EmbedBuilder()
            .setTitle('üèì VietForex Bot Production')
            .setDescription('Bot Trading Forex t·ª± ƒë·ªông ƒëang ho·∫°t ƒë·ªông')
            .setColor(0x00FF00)
            .addFields(
                { name: '‚è∞ Th·ªùi gian', value: new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' }), inline: true },
                { name: 'üìä Status', value: 'üü¢ PRODUCTION', inline: true },
                { name: 'üéØ Channel', value: SIGNALS_CHANNEL ? `‚úÖ ${SIGNALS_CHANNEL.name}` : '‚ùå L·ªói channel', inline: true },
                { name: 'üì° Signal Generator', value: '‚úÖ Ho·∫°t ƒë·ªông m·ªói 3 ph√∫t', inline: true },
                { name: 'üáªüá≥ Language', value: 'Ti·∫øng Vi·ªát', inline: true },
                { name: 'üîÑ Version', value: 'v2.0 Production', inline: true }
            )
            .setFooter({ text: 'VietForex AI Trading System üáªüá≥' })
            .setTimestamp();
        
        await message.reply({ embeds: [embed] });
        console.log(`‚úÖ ƒê√£ tr·∫£ l·ªùi !ping cho ${message.author.username}`);
    }
    
    if (content === '!trogiup') {
        const embed = new EmbedBuilder()
            .setTitle('ü§ñ VietForex Trading Bot - H∆∞·ªõng D·∫´n')
            .setDescription('Bot giao d·ªãch Forex t·ª± ƒë·ªông v·ªõi AI ti·∫øng Vi·ªát')
            .setColor(0x800080)
            .addFields(
                { name: '!ping', value: 'üèì Ki·ªÉm tra tr·∫°ng th√°i bot', inline: true },
                { name: '!trogiup', value: '‚ùì Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y', inline: true },
                { name: '!test', value: 'üß™ G·ª≠i t√≠n hi·ªáu test', inline: true }
            )
            .addFields({
                name: 'üéØ T√≠nh nƒÉng ch√≠nh',
                value: `‚Ä¢ ü§ñ **T√≠n hi·ªáu AI t·ª± ƒë·ªông** m·ªói 3 ph√∫t
                       ‚Ä¢ üìä **Ph√¢n t√≠ch k·ªπ thu·∫≠t** chuy√™n s√¢u
                       ‚Ä¢ üõ°Ô∏è **Qu·∫£n l√Ω r·ªßi ro** th√¥ng minh
                       ‚Ä¢ üáªüá≥ **Giao di·ªán ti·∫øng Vi·ªát** ho√†n to√†n
                       ‚Ä¢ ‚ö° **Real-time** c·∫≠p nh·∫≠t li√™n t·ª•c`,
                inline: false
            })
            .addFields({
                name: 'üìà Th√¥ng tin t√≠n hi·ªáu',
                value: `‚Ä¢ **C·∫∑p ti·ªÅn**: EURUSD, GBPUSD, USDJPY
                       ‚Ä¢ **ƒê·ªô tin c·∫≠y**: 75-95%
                       ‚Ä¢ **Risk/Reward**: 1:2 t·ªëi ∆∞u
                       ‚Ä¢ **Khung th·ªùi gian**: M15/H1`,
                inline: false
            })
            .setFooter({ text: 'Made with ‚ù§Ô∏è in Vietnam' })
            .setTimestamp();
        
        await message.reply({ embeds: [embed] });
        console.log(`‚úÖ ƒê√£ hi·ªÉn th·ªã tr·ª£ gi√∫p cho ${message.author.username}`);
    }
    
    if (content === '!test') {
        await guiTinHieuTest(message.channel);
        console.log(`üß™ ƒê√£ g·ª≠i test signal cho ${message.author.username}`);
    }
});

// Function g·ª≠i t√≠n hi·ªáu test
async function guiTinHieuTest(channel) {
    const tinHieuTest = {
        ma_tin_hieu: 'TEST_' + Date.now(),
        cap_tien_te: ['EURUSD', 'GBPUSD', 'USDJPY'][Math.floor(Math.random() * 3)],
        huong: Math.random() > 0.5 ? 'MUA' : 'BAN',
        gia_vao: 1.0850,
        cat_lo: 1.0830,
        lay_lai: 1.0890,
        do_tin_cay: 75 + Math.floor(Math.random() * 20)
    };
    
    await guiTinHieu(tinHieuTest, channel);
}

// Function g·ª≠i t√≠n hi·ªáu ch√≠nh
async function guiTinHieu(duLieuTinHieu, targetChannel = null) {
    try {
        const channel = targetChannel || SIGNALS_CHANNEL;
        
        if (!channel) {
            console.error('‚ùå Kh√¥ng c√≥ channel ƒë·ªÉ g·ª≠i signal');
            return false;
        }
        
        const bieuTuongHuong = duLieuTinHieu.huong === 'MUA' ? 'üü¢' : 'üî¥';
        const mauSac = duLieuTinHieu.huong === 'MUA' ? 0x00FF00 : 0xFF0000;
        const saoTinCay = '‚≠ê'.repeat(Math.min(5, Math.floor(duLieuTinHieu.do_tin_cay / 20)));
        
        // T√≠nh risk/reward
        const riskPips = Math.abs(duLieuTinHieu.gia_vao - duLieuTinHieu.cat_lo) * 10000;
        const rewardPips = Math.abs(duLieuTinHieu.lay_lai - duLieuTinHieu.gia_vao) * 10000;
        const rrRatio = (rewardPips / riskPips).toFixed(1);
        
        const embed = new EmbedBuilder()
            .setTitle(`${bieuTuongHuong} T√çN HI·ªÜU ${duLieuTinHieu.huong} ${duLieuTinHieu.cap_tien_te}`)
            .setColor(mauSac)
            .addFields(
                { name: 'üí∞ Gi√° v√†o', value: `**${duLieuTinHieu.gia_vao}**`, inline: true },
                { name: 'üõë C·∫Øt l·ªó', value: `**${duLieuTinHieu.cat_lo}**`, inline: true },
                { name: 'üéØ L·∫•y l√£i', value: `**${duLieuTinHieu.lay_lai}**`, inline: true },
                { name: 'üìä ƒê·ªô tin c·∫≠y', value: `**${duLieuTinHieu.do_tin_cay}%** ${saoTinCay}`, inline: true },
                { name: 'üìè Risk/Reward', value: `**1:${rrRatio}**`, inline: true },
                { name: '‚è∞ Th·ªùi gian', value: new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' }), inline: true }
            )
            .addFields({
                name: 'üìà Ph√¢n t√≠ch k·ªπ thu·∫≠t',
                value: `üî∏ **Xu h∆∞·ªõng**: ${duLieuTinHieu.huong === 'MUA' ? 'TƒÉng m·∫°nh üìà' : 'Gi·∫£m m·∫°nh üìâ'}
                       üî∏ **Khung th·ªùi gian**: M15/H1 confluence
                       üî∏ **AI Model**: VietForex ML v2.0
                       üî∏ **Risk Management**: T·ª± ƒë·ªông t·ªëi ∆∞u
                       üî∏ **Entry Strategy**: Breakout confirmation`,
                inline: false
            })
            .addFields({
                name: 'üõ°Ô∏è Qu·∫£n l√Ω r·ªßi ro',
                value: `‚Ä¢ **Stop Loss**: ${Math.round(riskPips)} pips
                       ‚Ä¢ **Take Profit**: ${Math.round(rewardPips)} pips  
                       ‚Ä¢ **Position Size**: T√≠nh theo 2% account
                       ‚Ä¢ **Max Risk**: Th·∫•p ƒë·∫øn trung b√¨nh`,
                inline: false
            })
            .setFooter({ text: `‚ö° VietForex AI Trading ‚Ä¢ Signal ID: ${duLieuTinHieu.ma_tin_hieu.slice(-8)} ‚Ä¢ Made in Vietnam üáªüá≥` })
            .setTimestamp();
        
        await channel.send({ embeds: [embed] });
        console.log(`‚úÖ [${new Date().toLocaleString('vi-VN')}] ƒê√£ g·ª≠i signal: ${duLieuTinHieu.huong} ${duLieuTinHieu.cap_tien_te} (${duLieuTinHieu.do_tin_cay}%) ‚Üí ${channel.name}`);
        return true;
        
    } catch (error) {
        console.error('‚ùå L·ªói g·ª≠i signal:', error);
        return false;
    }
}

// Export function ƒë·ªÉ Signal Generator s·ª≠ d·ª•ng
global.guiTinHieuVietForex = guiTinHieu;

// Login bot
client.login(process.env.DISCORD_BOT_TOKEN)
    .then(() => {
        console.log('üöÄ VietForex Production Bot ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!');
    })
    .catch(error => {
        console.error('‚ùå L·ªói k·∫øt n·ªëi Discord:', error);
    });

module.exports = { client, guiTinHieu };
