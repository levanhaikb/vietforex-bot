const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const signalBridge = require('../shared/signal-bridge');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

const SIGNALS_CHANNEL_ID = '1378299763429441566';

client.on('ready', () => {
    console.log(`‚úÖ ${client.user.tag} ƒë√£ online!`);
    console.log(`üéØ ƒêang theo d√µi channel: ${SIGNALS_CHANNEL_ID}`);
    
    // ƒêƒÉng k√Ω v·ªõi Signal Bridge
    signalBridge.registerDiscordBot(client, SIGNALS_CHANNEL_ID);
    
    client.user.setActivity('üéØ VietForex Signals', { type: 'WATCHING' });
});

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    
    const content = message.content.toLowerCase();
    console.log(`üì® Nh·∫≠n tin nh·∫Øn: ${content} t·ª´ ${message.author.username}`);
    
    if (content === '!ping') {
        const embed = new EmbedBuilder()
            .setTitle('üèì Pong!')
            .setDescription('VietForex Bot ƒëang ho·∫°t ƒë·ªông t·ªët!')
            .setColor(0x00FF00)
            .addFields(
                { name: '‚è∞ Th·ªùi gian', value: new Date().toLocaleString('vi-VN', { timeZone: 'Asia/Ho_Chi_Minh' }), inline: true },
                { name: 'üìä Status', value: 'üü¢ ONLINE', inline: true },
                { name: 'üéØ Version', value: 'VietForex v2.0', inline: true },
                { name: 'üåâ Signal Bridge', value: `${signalBridge.getSignalCount()} signals`, inline: true }
            )
            .setFooter({ text: 'Made in Vietnam üáªüá≥' })
            .setTimestamp();
        
        await message.reply({ embeds: [embed] });
        console.log(`‚úÖ ƒê√£ tr·∫£ l·ªùi !ping cho ${message.author.username}`);
    }
    
    if (content === '!trogiup') {
        const embed = new EmbedBuilder()
            .setTitle('ü§ñ H∆∞·ªõng D·∫´n VietForex Bot')
            .setDescription('Bot Trading Forex t·ª± ƒë·ªông b·∫±ng ti·∫øng Vi·ªát')
            .setColor(0x800080)
            .addFields(
                { name: '!ping', value: 'üèì Ki·ªÉm tra bot ho·∫°t ƒë·ªông', inline: true },
                { name: '!trogiup', value: '‚ùì Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n', inline: true },
                { name: '!test', value: 'üß™ Test t√≠n hi·ªáu m·∫´u', inline: true },
                { name: '!thongke', value: 'üìä Xem th·ªëng k√™ signals', inline: true }
            )
            .addFields({
                name: 'üéØ T√≠nh nƒÉng VietForex',
                value: `‚Ä¢ ü§ñ T√≠n hi·ªáu AI t·ª± ƒë·ªông m·ªói 3 ph√∫t
                       ‚Ä¢ üìà Ph√¢n t√≠ch multi-timeframe M15/H1
                       ‚Ä¢ üõ°Ô∏è Qu·∫£n l√Ω r·ªßi ro chuy√™n nghi·ªáp R:R 1:2
                       ‚Ä¢ üìä Theo d√µi hi·ªáu su·∫•t real-time
                       ‚Ä¢ üáªüá≥ Giao di·ªán 100% ti·∫øng Vi·ªát`,
                inline: false
            })
            .setFooter({ text: 'VietForex Trading Bot - Made in Vietnam üáªüá≥' })
            .setTimestamp();
        
        await message.reply({ embeds: [embed] });
        console.log(`‚úÖ ƒê√£ hi·ªÉn th·ªã tr·ª£ gi√∫p cho ${message.author.username}`);
    }
    
    if (content === '!test') {
        const tinHieuTest = {
            ma_tin_hieu: 'TEST_' + Date.now(),
            cap_tien_te: 'EURUSD',
            huong: Math.random() > 0.5 ? 'MUA' : 'BAN',
            gia_vao: 1.0850,
            cat_lo: 1.0830,
            lay_lai: 1.0890,
            do_tin_cay: 85
        };
        
        signalBridge.sendSignal(tinHieuTest);
        console.log(`üß™ ƒê√£ g·ª≠i test signal cho ${message.author.username}`);
    }
    
    if (content === '!thongke') {
        const recentSignals = signalBridge.getRecentSignals(5);
        const totalSignals = signalBridge.getSignalCount();
        
        const embed = new EmbedBuilder()
            .setTitle('üìä Th·ªëng K√™ VietForex')
            .setColor(0x0099FF)
            .addFields(
                { name: 'üéØ T·ªïng signals', value: totalSignals.toString(), inline: true },
                { name: 'üìà G·∫ßn ƒë√¢y', value: recentSignals.length.toString(), inline: true },
                { name: '‚ö° Tr·∫°ng th√°i', value: 'üü¢ HO·∫†T ƒê·ªòNG', inline: true }
            )
            .setFooter({ text: 'VietForex Statistics' })
            .setTimestamp();
        
        if (recentSignals.length > 0) {
            const signalList = recentSignals.map((signal, index) => 
                `${index + 1}. ${signal.huong} ${signal.cap_tien_te} (${signal.do_tin_cay}%)`
            ).join('\n');
            
            embed.addFields({
                name: 'üìã 5 Signals g·∫ßn nh·∫•t',
                value: signalList,
                inline: false
            });
        }
        
        await message.reply({ embeds: [embed] });
        console.log(`üìä ƒê√£ hi·ªÉn th·ªã th·ªëng k√™ cho ${message.author.username}`);
    }
});

// Login bot
client.login(process.env.DISCORD_BOT_TOKEN)
    .then(() => {
        console.log('üöÄ VietForex Discord Bot ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!');
    })
    .catch(error => {
        console.error('‚ùå L·ªói k·∫øt n·ªëi Discord:', error);
    });

module.exports = { client };
